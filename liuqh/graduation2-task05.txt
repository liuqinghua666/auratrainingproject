（5）任务5：流式分析
利用spark streaming 分析所有商家实时交易发生次数次数：
1、将shop_info 存放在mysql 中（任务1 已做）

2、编写Kafka produer 程序，将user_pay 数据依次写入kafka 中的 user_pay 主题中，每条数据写入间隔为10 毫秒，其中user_id 为key，
	shop_id+”,”+time_stamp 为value

3、编写spark streaming 程序，依次读取kafka 中user_pay 主题数据，并统计：
	a）每个商家实时交易次数，并存入redis，其中key为”jiaoyi+<shop_id>”, value 为累计的次数
  b）每个城市发生的交易次数，并存储redis，其中key 为“交易+<城市名称>”,value 为累计的次数



A、在kafka中创建队列user_pay
**************************************************
/home/zkpk/kafka_2.11-0.10.1.0/command/start-zookeeper.sh
/home/zkpk/kafka_2.11-0.10.1.0/command/start-kafka.sh
/home/zkpk/kafka_2.11-0.10.1.0/bin/kafka-topics.sh --create --zookeeper bigdata:2181 --replication-factor 1 --partitions 5 --topic user_pay --config delete.retention.ms=172800000

生产数据
bin/kafka-console-producer.sh --broker-list bigdata:9092 --topic user_pay 
然后，键盘输入下面的信息并输入回车:
另外启动一个终端消费数据
bin/kafka-console-consumer.sh --bootstrap-server bigdata:9092 --topic user_pay --from-beginning




B、编写Kafka produer 程序：JavaKafkaEventProducer.java
**************************************************
package org.training.spark.graduation2;

import com.alibaba.fastjson.JSONObject;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.spark.SparkConf;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.training.spark.util.KafkaRedisConfig;

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

/**
 * Created by qinghua.liu on 3/29/18.
 * 1、编写Kafka produer 程序，将user_pay 数据依次写入kafka 中的 user_pay 主题中，每条数据写入间隔为10 毫秒，其中user_id 为key，
 shop_id+”,”+time_stamp 为value
 */
public class JavaKafkaEventProducer {

    // config
    public static Properties getConfig()
    {
        Properties props = new Properties();
        //props.put("bootstrap.servers", "localhost:9092");
        props.put("bootstrap.servers", KafkaRedisConfig.KAFKA_ADDR);
        props.put("acks", "all");
        props.put("retries", 0);
        props.put("batch.size", 16384);
        props.put("linger.ms", 1);
        props.put("buffer.memory", 33554432);
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        return props;
    }

    public static void main(String[] args) throws Exception {
        String dataPath = "D:\\bigdata\\source\\auratrainingproject\\spark\\data\\IJCAI17_dataset";

        String topic = KafkaRedisConfig.KAFKA_USER_PAY_TOPIC;
        Properties props = getConfig();
        Producer<String, String> producer = new KafkaProducer<String, String>(props);

        //准备文件路径
        if(args.length > 0) {
            dataPath = args[0];
        }
        String fileName =  JavaSQLAliPayAnalyzer.getOSPath(dataPath+"/user_pay.txt");

        File file = new File(fileName);
        BufferedReader reader = null;
        try {
            System.out.println("以行为单位读取文件内容，一次读一整行：");
            reader = new BufferedReader(new FileReader(file));
            String tempString = null;
            int line = 1;
            //一次读入一行，直到读入null为文件结束
            while ((tempString = reader.readLine()) != null){
                //显示行号
                //System.out.println("line[" + line + "]=" + tempString);
                //准备数据
                String[] row = tempString.split(",");
                if(row.length>=3) {
                    String key = "" + row[0];//user_id
                    String value = "" + row[1] + "," + row[2];//shop_id+”,”+time_stamp
                    // 推送数据
                    producer.send(new ProducerRecord(topic, key, value));
                    System.out.println("Message[" + line + "] sent: " + key + "=>" + value);
                    producer.send(new ProducerRecord(topic, key, value));
                    line++;
                    Thread.sleep(10);
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null){
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }

    }
}



C、编写编写spark streaming 程序：JavaKafkaShopCityAnalytics.java
**************************************************
package org.training.spark.graduation2;

import kafka.serializer.StringDecoder;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SQLContext;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaPairInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka.KafkaUtils;
import org.training.spark.util.JavaRedisClient;
import org.training.spark.util.KafkaRedisConfig;
import redis.clients.jedis.Jedis;
import scala.Tuple2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/**
 * Created by qinghua.liu on 3/29/18.
 * 2、编写spark streaming 程序，依次读取kafka 中user_pay 主题数据，并统计：
 a）每个商家实时交易次数，并存入redis，其中key为”jiaoyi+<shop_id>”, value 为累计的次数
 b）每个城市发生的交易次数，并存储redis，其中key 为“交易+<城市名称>”,value 为累计的次数
 */
public class JavaKafkaShopCityAnalytics {
    public static Map<String, String> shopCityMap = null;
    public static Map<String, String> getShopCityMap(String dataPath){
        Map<String, String> retMap = new HashMap<String, String>();
        String fileName =  JavaSQLAliPayAnalyzer.getOSPath(dataPath+"/shop_info.txt");

        File file = new File(fileName);
        BufferedReader reader = null;
        try {
            System.out.println("以行为单位读取文件内容，一次读一整行：");
            reader = new BufferedReader(new FileReader(file));
            String tempString = null;
            int line = 1;
            //一次读入一行，直到读入null为文件结束
            while ((tempString = reader.readLine()) != null){
                String[] row = tempString.split(",");
                if(row.length>=2) {
                    String key = "" + row[0];//shop_id
                    String value = "" + row[1];//city
                    retMap.put(key, value);
                    line++;
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null){
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }

        return retMap;
    }

    public static String getCityOfShop(String shopId, String dataPath){
        if(shopCityMap==null || shopCityMap.isEmpty()){
            shopCityMap = getShopCityMap(dataPath);
        }

        return shopCityMap.get(shopId);
    }

    public static String dataPath = "D:\\bigdata\\source\\auratrainingproject\\spark\\data\\IJCAI17_dataset";
    public static void main(String[] args) throws Exception {
        SparkConf conf = new SparkConf().setAppName("JavaKafkaShopCityAnalytics");
        if (args.length == 0) {
            conf.setMaster("local[1]");
        }else {
            dataPath = args[0];
        }

        JavaStreamingContext ssc = new JavaStreamingContext(conf, Durations.seconds(5));

        // Kafka configurations
        String[] topics = KafkaRedisConfig.KAFKA_USER_PAY_TOPIC.split("\\,");
        System.out.println("Topics: " + Arrays.toString(topics));

        String brokers = KafkaRedisConfig.KAFKA_ADDR;
        Map<String, String> kafkaParams = new HashMap<>();
        kafkaParams.put("metadata.broker.list", brokers);
        kafkaParams.put("serializer.class", "kafka.serializer.StringEncoder");

        final String clickHashKey = "app::shop::paycount";

        // Create a direct stream
        JavaPairInputDStream<String, String> kafkaStream = KafkaUtils.createDirectStream(ssc,
                String.class, String.class,
                StringDecoder.class, StringDecoder.class,
                kafkaParams,
                new HashSet<String>(Arrays.asList(topics)));

        JavaDStream events = kafkaStream.map(new Function<Tuple2<String, String>, String[]>() {
            @Override
            public String[] call(Tuple2<String, String> line) throws Exception {
                System.out.println("line:" + line._1()+"=>"+ line._2().split(",")[0]);
                String[] data = new String[]{line._1(),line._2().split(",")[0]};
                return data;
            }
        });

        // Compute user click times
        JavaPairDStream<String, Long> shopClicks = events.mapToPair(
                new PairFunction<String[], String, Long>() {
                    @Override
                    public Tuple2<String, Long> call(String[] x) {
                        return new Tuple2<>(x[1], new Long(1));
                    }
                }).reduceByKey(new Function2<Long, Long, Long>() {
                    @Override
                    public Long call(Long i1, Long i2) {
                        return i1 + i2;
                    }
                });
        shopClicks.foreachRDD(new VoidFunction<JavaPairRDD<String, Long>>() {
            @Override
            public void call(JavaPairRDD<String, Long> rdd) throws Exception {
                rdd.foreachPartition(new VoidFunction<Iterator<Tuple2<String, Long>>>() {
                    @Override
                    public void call(Iterator<Tuple2<String, Long>> partitionOfRecords) throws Exception {
                        Jedis jedis = JavaRedisClient.get().getResource();
                        while(partitionOfRecords.hasNext()) {
                            try {
                                Tuple2<String, Long> pair = partitionOfRecords.next();
                                String shopid = "jiaoyi"+pair._1 ();
                                String city = "交易"+getCityOfShop(pair._1 (),dataPath);
                                long clickCount = pair._2();
                                //jedis.hincrBy(clickHashKey, shopid, clickCount);
                                jedis.incrBy(shopid, clickCount);
                                System.out.println("Update shopid " + shopid + " inc " + clickCount);

                                jedis.incrBy(city, clickCount);
                                System.out.println("Update city " + city + " inc " + clickCount);

                            } catch(Exception e) {
                                System.out.println("error:" + e);
                            }
                        }
                        jedis.close();
                    }
                });
            }
        });

        ssc.start();
        ssc.awaitTermination();
    }
}



D、编写编写UI展现 程序：JavaRedisReportUI
**************************************************
package org.training.spark.graduation2;

import kafka.serializer.StringDecoder;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaPairInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka.KafkaUtils;
import org.training.spark.util.JavaRedisClient;
import org.training.spark.util.KafkaRedisConfig;
import redis.clients.jedis.Jedis;
import scala.Tuple2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/**
 * Created by qinghua.liu on 3/29/18.
 * 3、编写UI程序，将存入Redis中的数据读取并展示
 a）读取每个商家实时交易次数，redis，其中key为”jiaoyi+<shop_id>”, value 为累计的次数
 b）读取每个城市发生的交易次数，redis，其中key 为“交易+<城市名称>”,value 为累计的次数
 */
public class JavaRedisReportUI {
    public static List<String> shopIdList = new ArrayList<String>();
    public static List<String> cityNameList = new ArrayList<String>();
    public static void getShopCityList(String dataPath){
        shopIdList.clear();
        cityNameList.clear();
        String fileName =  JavaSQLAliPayAnalyzer.getOSPath(dataPath+"/shop_info.txt");

        File file = new File(fileName);
        BufferedReader reader = null;
        try {
            System.out.println("以行为单位读取文件内容，一次读一整行：");
            reader = new BufferedReader(new FileReader(file));
            String tempString = null;
            int line = 1;
            //一次读入一行，直到读入null为文件结束
            while ((tempString = reader.readLine()) != null){
                String[] row = tempString.split(",");
                if(row.length>=2) {
                    String shopId = "" + row[0];//shop_id
                    String cityName = "" + row[1];//city
                    if(!shopIdList.contains(shopId)){
                        shopIdList.add(shopId);
                    }
                    if(!cityNameList.contains(cityName)){
                        cityNameList.add(cityName);
                    }
                    line++;
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null){
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }
    }

    public static void checkData(String dataPath){
        if(shopIdList.isEmpty() || cityNameList.isEmpty()){
            getShopCityList(dataPath);
        }
    }

    public static String dataPath = "D:\\bigdata\\source\\auratrainingproject\\spark\\data\\IJCAI17_dataset";
    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            ;
        }else {
            dataPath = args[0];
        }
        checkData(dataPath);
        while (true) {
            Jedis jedis = JavaRedisClient.get().getResource();

            System.out.println("\r\n*********商家交易量统计信息start***********"+new Date());
            int idx = 0;
            for (String shopId : shopIdList) {
                String val = jedis.get("jiaoyi" + shopId);
                if (val != null && val.length() > 0) {
                    System.out.println("商家[" + (++idx) + "]" + shopId + "的交易笔数：" + val);
                }
            }

            System.out.println("*********城市交易量统计信息start***********"+new Date());
            idx = 0;
            for (String cityName : cityNameList) {
                String val = jedis.get("交易" + cityName);
                if (val != null && val.length() > 0) {
                    System.out.println("城市[" + (++idx) + "]" + cityName + "的交易笔数：" + val);
                }
            }
            jedis.close();

            Thread.sleep(5000);
        }
    }
}



E、服务器上依次启动zookeeper、kafka；
IDE中依次运行JavaKafkaEventProducer.java、JavaKafkaShopCityAnalytics.java、JavaRedisReportUI.java；
查看UI打印结果。
**************************************************
java、JavaRedisReportUI.java打印结果为（每5s刷新一次数据）：
D:\bigdata\tools\JDK\jdk-8u121\bin\java "-javaagent:D:\bigdata\tools\IDE\JetBrains\IntelliJ IDEA Community Edition 2017.1.4\lib\idea_rt.jar=59223:D:\bigdata\tools\IDE\JetBrains\IntelliJ IDEA Community Edition 2017.1.4\bin" -Dfile.encoding=UTF-8 -classpath D:\bigdata\tools\JDK\jdk-8u121\jre\lib\charsets.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\deploy.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\access-bridge-64.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\cldrdata.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\dnsns.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\jaccess.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\jfxrt.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\localedata.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\nashorn.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\sunec.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\sunjce_provider.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\sunmscapi.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\sunpkcs11.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\ext\zipfs.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\javaws.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\jce.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\jfr.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\jfxswt.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\jsse.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\management-agent.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\plugin.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\resources.jar;D:\bigdata\tools\JDK\jdk-8u121\jre\lib\rt.jar;D:\bigdata\source\auratrainingproject\spark\target\classes;C:\Users\henry\.m2\repository\org\apache\kafka\kafka-clients\0.10.0.1\kafka-clients-0.10.0.1.jar;C:\Users\henry\.m2\repository\net\jpountz\lz4\lz4\1.3.0\lz4-1.3.0.jar;C:\Users\henry\.m2\repository\org\xerial\snappy\snappy-java\1.1.2.6\snappy-java-1.1.2.6.jar;C:\Users\henry\.m2\repository\org\slf4j\slf4j-api\1.7.21\slf4j-api-1.7.21.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-sql_2.11\2.1.0\spark-sql_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\com\univocity\univocity-parsers\2.2.1\univocity-parsers-2.2.1.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-sketch_2.11\2.1.0\spark-sketch_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-core_2.11\2.1.0\spark-core_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\com\twitter\chill_2.11\0.8.0\chill_2.11-0.8.0.jar;C:\Users\henry\.m2\repository\com\esotericsoftware\kryo-shaded\3.0.3\kryo-shaded-3.0.3.jar;C:\Users\henry\.m2\repository\com\esotericsoftware\minlog\1.3.0\minlog-1.3.0.jar;C:\Users\henry\.m2\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;C:\Users\henry\.m2\repository\com\twitter\chill-java\0.8.0\chill-java-0.8.0.jar;C:\Users\henry\.m2\repository\org\apache\xbean\xbean-asm5-shaded\4.4\xbean-asm5-shaded-4.4.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-client\2.2.0\hadoop-client-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-hdfs\2.2.0\hadoop-hdfs-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-mapreduce-client-app\2.2.0\hadoop-mapreduce-client-app-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-mapreduce-client-common\2.2.0\hadoop-mapreduce-client-common-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-yarn-client\2.2.0\hadoop-yarn-client-2.2.0.jar;C:\Users\henry\.m2\repository\com\google\inject\guice\3.0\guice-3.0.jar;C:\Users\henry\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar;C:\Users\henry\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-yarn-server-common\2.2.0\hadoop-yarn-server-common-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-mapreduce-client-shuffle\2.2.0\hadoop-mapreduce-client-shuffle-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-yarn-api\2.2.0\hadoop-yarn-api-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-mapreduce-client-jobclient\2.2.0\hadoop-mapreduce-client-jobclient-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-launcher_2.11\2.1.0\spark-launcher_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-network-common_2.11\2.1.0\spark-network-common_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\fusesource\leveldbjni\leveldbjni-all\1.8\leveldbjni-all-1.8.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-network-shuffle_2.11\2.1.0\spark-network-shuffle_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-unsafe_2.11\2.1.0\spark-unsafe_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\net\java\dev\jets3t\jets3t\0.7.1\jets3t-0.7.1.jar;C:\Users\henry\.m2\repository\org\apache\curator\curator-recipes\2.4.0\curator-recipes-2.4.0.jar;C:\Users\henry\.m2\repository\org\apache\curator\curator-framework\2.4.0\curator-framework-2.4.0.jar;C:\Users\henry\.m2\repository\org\apache\curator\curator-client\2.4.0\curator-client-2.4.0.jar;C:\Users\henry\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar;C:\Users\henry\.m2\repository\org\apache\commons\commons-lang3\3.5\commons-lang3-3.5.jar;C:\Users\henry\.m2\repository\org\slf4j\jul-to-slf4j\1.7.16\jul-to-slf4j-1.7.16.jar;C:\Users\henry\.m2\repository\org\slf4j\jcl-over-slf4j\1.7.16\jcl-over-slf4j-1.7.16.jar;C:\Users\henry\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\henry\.m2\repository\org\slf4j\slf4j-log4j12\1.7.16\slf4j-log4j12-1.7.16.jar;C:\Users\henry\.m2\repository\com\ning\compress-lzf\1.0.3\compress-lzf-1.0.3.jar;C:\Users\henry\.m2\repository\org\roaringbitmap\RoaringBitmap\0.5.11\RoaringBitmap-0.5.11.jar;C:\Users\henry\.m2\repository\commons-net\commons-net\2.2\commons-net-2.2.jar;C:\Users\henry\.m2\repository\org\json4s\json4s-jackson_2.11\3.2.11\json4s-jackson_2.11-3.2.11.jar;C:\Users\henry\.m2\repository\org\json4s\json4s-core_2.11\3.2.11\json4s-core_2.11-3.2.11.jar;C:\Users\henry\.m2\repository\org\json4s\json4s-ast_2.11\3.2.11\json4s-ast_2.11-3.2.11.jar;C:\Users\henry\.m2\repository\org\scala-lang\scalap\2.11.0\scalap-2.11.0.jar;C:\Users\henry\.m2\repository\org\scala-lang\scala-compiler\2.11.0\scala-compiler-2.11.0.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\core\jersey-client\2.22.2\jersey-client-2.22.2.jar;C:\Users\henry\.m2\repository\javax\ws\rs\javax.ws.rs-api\2.0.1\javax.ws.rs-api-2.0.1.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\hk2-api\2.4.0-b34\hk2-api-2.4.0-b34.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\hk2-utils\2.4.0-b34\hk2-utils-2.4.0-b34.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\external\aopalliance-repackaged\2.4.0-b34\aopalliance-repackaged-2.4.0-b34.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\external\javax.inject\2.4.0-b34\javax.inject-2.4.0-b34.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\hk2-locator\2.4.0-b34\hk2-locator-2.4.0-b34.jar;C:\Users\henry\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\core\jersey-common\2.22.2\jersey-common-2.22.2.jar;C:\Users\henry\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\bundles\repackaged\jersey-guava\2.22.2\jersey-guava-2.22.2.jar;C:\Users\henry\.m2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\core\jersey-server\2.22.2\jersey-server-2.22.2.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\media\jersey-media-jaxb\2.22.2\jersey-media-jaxb-2.22.2.jar;C:\Users\henry\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet\2.22.2\jersey-container-servlet-2.22.2.jar;C:\Users\henry\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.22.2\jersey-container-servlet-core-2.22.2.jar;C:\Users\henry\.m2\repository\io\netty\netty\3.8.0.Final\netty-3.8.0.Final.jar;C:\Users\henry\.m2\repository\com\clearspring\analytics\stream\2.7.0\stream-2.7.0.jar;C:\Users\henry\.m2\repository\io\dropwizard\metrics\metrics-core\3.1.2\metrics-core-3.1.2.jar;C:\Users\henry\.m2\repository\io\dropwizard\metrics\metrics-jvm\3.1.2\metrics-jvm-3.1.2.jar;C:\Users\henry\.m2\repository\io\dropwizard\metrics\metrics-json\3.1.2\metrics-json-3.1.2.jar;C:\Users\henry\.m2\repository\io\dropwizard\metrics\metrics-graphite\3.1.2\metrics-graphite-3.1.2.jar;C:\Users\henry\.m2\repository\com\fasterxml\jackson\module\jackson-module-scala_2.11\2.6.5\jackson-module-scala_2.11-2.6.5.jar;C:\Users\henry\.m2\repository\com\fasterxml\jackson\module\jackson-module-paranamer\2.6.5\jackson-module-paranamer-2.6.5.jar;C:\Users\henry\.m2\repository\org\apache\ivy\ivy\2.4.0\ivy-2.4.0.jar;C:\Users\henry\.m2\repository\oro\oro\2.0.8\oro-2.0.8.jar;C:\Users\henry\.m2\repository\net\razorvine\pyrolite\4.13\pyrolite-4.13.jar;C:\Users\henry\.m2\repository\net\sf\py4j\py4j\0.10.4\py4j-0.10.4.jar;C:\Users\henry\.m2\repository\org\apache\commons\commons-crypto\1.0.0\commons-crypto-1.0.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-catalyst_2.11\2.1.0\spark-catalyst_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\scala-lang\scala-reflect\2.11.8\scala-reflect-2.11.8.jar;C:\Users\henry\.m2\repository\org\codehaus\janino\janino\3.0.0\janino-3.0.0.jar;C:\Users\henry\.m2\repository\org\codehaus\janino\commons-compiler\3.0.0\commons-compiler-3.0.0.jar;C:\Users\henry\.m2\repository\org\antlr\antlr4-runtime\4.5.3\antlr4-runtime-4.5.3.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-tags_2.11\2.1.0\spark-tags_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\scalatest\scalatest_2.11\2.2.6\scalatest_2.11-2.2.6.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-column\1.8.1\parquet-column-1.8.1.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-common\1.8.1\parquet-common-1.8.1.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-encoding\1.8.1\parquet-encoding-1.8.1.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-hadoop\1.8.1\parquet-hadoop-1.8.1.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-format\2.3.0-incubating\parquet-format-2.3.0-incubating.jar;C:\Users\henry\.m2\repository\org\apache\parquet\parquet-jackson\1.8.1\parquet-jackson-1.8.1.jar;C:\Users\henry\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.11\jackson-core-asl-1.9.11.jar;C:\Users\henry\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.6.5\jackson-databind-2.6.5.jar;C:\Users\henry\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.6.0\jackson-annotations-2.6.0.jar;C:\Users\henry\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.6.5\jackson-core-2.6.5.jar;C:\Users\henry\.m2\repository\org\spark-project\spark\unused\1.0.0\unused-1.0.0.jar;C:\Users\henry\.m2\repository\mysql\mysql-connector-java\5.1.24\mysql-connector-java-5.1.24.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-hive_2.11\2.1.0\spark-hive_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\com\twitter\parquet-hadoop-bundle\1.6.0\parquet-hadoop-bundle-1.6.0.jar;C:\Users\henry\.m2\repository\org\spark-project\hive\hive-exec\1.2.1.spark2\hive-exec-1.2.1.spark2.jar;C:\Users\henry\.m2\repository\javolution\javolution\5.5.1\javolution-5.5.1.jar;C:\Users\henry\.m2\repository\log4j\apache-log4j-extras\1.2.17\apache-log4j-extras-1.2.17.jar;C:\Users\henry\.m2\repository\org\antlr\antlr-runtime\3.4\antlr-runtime-3.4.jar;C:\Users\henry\.m2\repository\org\antlr\stringtemplate\3.2.1\stringtemplate-3.2.1.jar;C:\Users\henry\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\henry\.m2\repository\org\antlr\ST4\4.0.4\ST4-4.0.4.jar;C:\Users\henry\.m2\repository\org\apache\commons\commons-compress\1.4.1\commons-compress-1.4.1.jar;C:\Users\henry\.m2\repository\org\tukaani\xz\1.0\xz-1.0.jar;C:\Users\henry\.m2\repository\com\googlecode\javaewah\JavaEWAH\0.3.2\JavaEWAH-0.3.2.jar;C:\Users\henry\.m2\repository\org\iq80\snappy\snappy\0.2\snappy-0.2.jar;C:\Users\henry\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar;C:\Users\henry\.m2\repository\org\spark-project\hive\hive-metastore\1.2.1.spark2\hive-metastore-1.2.1.spark2.jar;C:\Users\henry\.m2\repository\com\jolbox\bonecp\0.8.0.RELEASE\bonecp-0.8.0.RELEASE.jar;C:\Users\henry\.m2\repository\commons-cli\commons-cli\1.2\commons-cli-1.2.jar;C:\Users\henry\.m2\repository\org\apache\derby\derby\10.10.2.0\derby-10.10.2.0.jar;C:\Users\henry\.m2\repository\org\datanucleus\datanucleus-api-jdo\3.2.6\datanucleus-api-jdo-3.2.6.jar;C:\Users\henry\.m2\repository\org\datanucleus\datanucleus-rdbms\3.2.9\datanucleus-rdbms-3.2.9.jar;C:\Users\henry\.m2\repository\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;C:\Users\henry\.m2\repository\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;C:\Users\henry\.m2\repository\javax\jdo\jdo-api\3.0.1\jdo-api-3.0.1.jar;C:\Users\henry\.m2\repository\javax\transaction\jta\1.1\jta-1.1.jar;C:\Users\henry\.m2\repository\org\apache\avro\avro\1.7.7\avro-1.7.7.jar;C:\Users\henry\.m2\repository\com\thoughtworks\paranamer\paranamer\2.3\paranamer-2.3.jar;C:\Users\henry\.m2\repository\org\apache\avro\avro-mapred\1.7.7\avro-mapred-1.7.7-hadoop2.jar;C:\Users\henry\.m2\repository\org\apache\avro\avro-ipc\1.7.7\avro-ipc-1.7.7.jar;C:\Users\henry\.m2\repository\org\apache\avro\avro-ipc\1.7.7\avro-ipc-1.7.7-tests.jar;C:\Users\henry\.m2\repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;C:\Users\henry\.m2\repository\org\apache\calcite\calcite-avatica\1.2.0-incubating\calcite-avatica-1.2.0-incubating.jar;C:\Users\henry\.m2\repository\org\apache\calcite\calcite-core\1.2.0-incubating\calcite-core-1.2.0-incubating.jar;C:\Users\henry\.m2\repository\org\apache\calcite\calcite-linq4j\1.2.0-incubating\calcite-linq4j-1.2.0-incubating.jar;C:\Users\henry\.m2\repository\net\hydromatic\eigenbase-properties\1.1.5\eigenbase-properties-1.1.5.jar;C:\Users\henry\.m2\repository\org\apache\httpcomponents\httpclient\4.5.2\httpclient-4.5.2.jar;C:\Users\henry\.m2\repository\org\apache\httpcomponents\httpcore\4.4.4\httpcore-4.4.4.jar;C:\Users\henry\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.13\jackson-mapper-asl-1.9.13.jar;C:\Users\henry\.m2\repository\commons-codec\commons-codec\1.10\commons-codec-1.10.jar;C:\Users\henry\.m2\repository\joda-time\joda-time\2.9.3\joda-time-2.9.3.jar;C:\Users\henry\.m2\repository\org\jodd\jodd-core\3.5.2\jodd-core-3.5.2.jar;C:\Users\henry\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar;C:\Users\henry\.m2\repository\org\datanucleus\datanucleus-core\3.2.10\datanucleus-core-3.2.10.jar;C:\Users\henry\.m2\repository\org\apache\thrift\libthrift\0.9.2\libthrift-0.9.2.jar;C:\Users\henry\.m2\repository\org\apache\thrift\libfb303\0.9.2\libfb303-0.9.2.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-mllib_2.11\2.1.0\spark-mllib_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-streaming_2.11\2.1.0\spark-streaming_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-graphx_2.11\2.1.0\spark-graphx_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-mllib-local_2.11\2.1.0\spark-mllib-local_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\commons\commons-math3\3.4.1\commons-math3-3.4.1.jar;C:\Users\henry\.m2\repository\org\jpmml\pmml-model\1.2.15\pmml-model-1.2.15.jar;C:\Users\henry\.m2\repository\org\jpmml\pmml-schema\1.2.15\pmml-schema-1.2.15.jar;C:\Users\henry\.m2\repository\org\apache\spark\spark-streaming-kafka-0-8_2.11\2.1.0\spark-streaming-kafka-0-8_2.11-2.1.0.jar;C:\Users\henry\.m2\repository\org\apache\kafka\kafka_2.11\0.8.2.1\kafka_2.11-0.8.2.1.jar;C:\Users\henry\.m2\repository\org\scala-lang\modules\scala-xml_2.11\1.0.2\scala-xml_2.11-1.0.2.jar;C:\Users\henry\.m2\repository\org\scala-lang\modules\scala-parser-combinators_2.11\1.0.2\scala-parser-combinators_2.11-1.0.2.jar;C:\Users\henry\.m2\repository\com\101tec\zkclient\0.3\zkclient-0.3.jar;C:\Users\henry\.m2\repository\redis\clients\jedis\2.8.2\jedis-2.8.2.jar;C:\Users\henry\.m2\repository\org\apache\commons\commons-pool2\2.4.2\commons-pool2-2.4.2.jar;C:\Users\henry\.m2\repository\com\alibaba\fastjson\1.2.14\fastjson-1.2.14.jar;C:\Users\henry\.m2\repository\org\scalanlp\breeze_2.11\0.12\breeze_2.11-0.12.jar;C:\Users\henry\.m2\repository\org\scala-lang\scala-library\2.11.7\scala-library-2.11.7.jar;C:\Users\henry\.m2\repository\org\scalanlp\breeze-macros_2.11\0.12\breeze-macros_2.11-0.12.jar;C:\Users\henry\.m2\repository\com\github\fommil\netlib\core\1.1.2\core-1.1.2.jar;C:\Users\henry\.m2\repository\net\sourceforge\f2j\arpack_combined_all\0.1\arpack_combined_all-0.1.jar;C:\Users\henry\.m2\repository\net\sf\opencsv\opencsv\2.3\opencsv-2.3.jar;C:\Users\henry\.m2\repository\com\github\rwl\jtransforms\2.4.0\jtransforms-2.4.0.jar;C:\Users\henry\.m2\repository\org\spire-math\spire_2.11\0.7.4\spire_2.11-0.7.4.jar;C:\Users\henry\.m2\repository\org\spire-math\spire-macros_2.11\0.7.4\spire-macros_2.11-0.7.4.jar;C:\Users\henry\.m2\repository\com\chuusai\shapeless_2.11\2.0.0\shapeless_2.11-2.0.0.jar;C:\Users\henry\.m2\repository\org\apache\hbase\hbase-client\1.2.4\hbase-client-1.2.4.jar;C:\Users\henry\.m2\repository\org\apache\hbase\hbase-annotations\1.2.4\hbase-annotations-1.2.4.jar;C:\Users\henry\.m2\repository\com\github\stephenc\findbugs\findbugs-annotations\1.3.9-1\findbugs-annotations-1.3.9-1.jar;C:\Users\henry\.m2\repository\org\apache\hbase\hbase-common\1.2.4\hbase-common-1.2.4.jar;C:\Users\henry\.m2\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;C:\Users\henry\.m2\repository\org\mortbay\jetty\jetty-util\6.1.26\jetty-util-6.1.26.jar;C:\Users\henry\.m2\repository\org\apache\hbase\hbase-protocol\1.2.4\hbase-protocol-1.2.4.jar;C:\Users\henry\.m2\repository\commons-io\commons-io\2.4\commons-io-2.4.jar;C:\Users\henry\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\henry\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\henry\.m2\repository\com\google\guava\guava\12.0.1\guava-12.0.1.jar;C:\Users\henry\.m2\repository\com\google\protobuf\protobuf-java\2.5.0\protobuf-java-2.5.0.jar;C:\Users\henry\.m2\repository\io\netty\netty-all\4.0.23.Final\netty-all-4.0.23.Final.jar;C:\Users\henry\.m2\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;C:\Users\henry\.m2\repository\org\apache\htrace\htrace-core\3.1.0-incubating\htrace-core-3.1.0-incubating.jar;C:\Users\henry\.m2\repository\org\jruby\jcodings\jcodings\1.0.8\jcodings-1.0.8.jar;C:\Users\henry\.m2\repository\org\jruby\joni\joni\2.1.2\joni-2.1.2.jar;C:\Users\henry\.m2\repository\com\yammer\metrics\metrics-core\2.2.0\metrics-core-2.2.0.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-auth\2.5.1\hadoop-auth-2.5.1.jar;C:\Users\henry\.m2\repository\org\apache\directory\server\apacheds-kerberos-codec\2.0.0-M15\apacheds-kerberos-codec-2.0.0-M15.jar;C:\Users\henry\.m2\repository\org\apache\directory\server\apacheds-i18n\2.0.0-M15\apacheds-i18n-2.0.0-M15.jar;C:\Users\henry\.m2\repository\org\apache\directory\api\api-asn1-api\1.0.0-M20\api-asn1-api-1.0.0-M20.jar;C:\Users\henry\.m2\repository\org\apache\directory\api\api-util\1.0.0-M20\api-util-1.0.0-M20.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-common\2.5.1\hadoop-common-2.5.1.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-annotations\2.5.1\hadoop-annotations-2.5.1.jar;D:\bigdata\tools\JDK\jdk-8u121\lib\tools.jar;C:\Users\henry\.m2\repository\xmlenc\xmlenc\0.52\xmlenc-0.52.jar;C:\Users\henry\.m2\repository\commons-el\commons-el\1.0\commons-el-1.0.jar;C:\Users\henry\.m2\repository\commons-configuration\commons-configuration\1.6\commons-configuration-1.6.jar;C:\Users\henry\.m2\repository\commons-digester\commons-digester\1.8\commons-digester-1.8.jar;C:\Users\henry\.m2\repository\commons-beanutils\commons-beanutils\1.7.0\commons-beanutils-1.7.0.jar;C:\Users\henry\.m2\repository\commons-beanutils\commons-beanutils-core\1.8.0\commons-beanutils-core-1.8.0.jar;C:\Users\henry\.m2\repository\com\jcraft\jsch\0.1.42\jsch-0.1.42.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-mapreduce-client-core\2.5.1\hadoop-mapreduce-client-core-2.5.1.jar;C:\Users\henry\.m2\repository\org\apache\hadoop\hadoop-yarn-common\2.5.1\hadoop-yarn-common-2.5.1.jar;C:\Users\henry\.m2\repository\javax\xml\bind\jaxb-api\2.2.2\jaxb-api-2.2.2.jar;C:\Users\henry\.m2\repository\javax\xml\stream\stax-api\1.0-2\stax-api-1.0-2.jar;C:\Users\henry\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\henry\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\henry\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar org.training.spark.graduation2.JavaRedisReportUI

//////////////////////  商家交易量统计信息start  //////////////////////Fri Mar 30 13:53:01 CST 2018
商家[1]408的交易笔数：11238
商家[2]1097的交易笔数：52968
商家[3]1862的交易笔数：36180
商家[4]1912的交易笔数：56133
//////////////////////  城市交易量统计信息start  //////////////////////Fri Mar 30 13:53:02 CST 2018
城市[1]上海的交易笔数：36180
城市[2]无锡的交易笔数：56133
城市[3]贵阳的交易笔数：11238
城市[4]东营的交易笔数：52968

//////////////////////  商家交易量统计信息start  //////////////////////Fri Mar 30 13:53:07 CST 2018
商家[1]408的交易笔数：11238
商家[2]1097的交易笔数：52968
商家[3]1862的交易笔数：36180
商家[4]1912的交易笔数：57082
//////////////////////  城市交易量统计信息start  //////////////////////Fri Mar 30 13:53:07 CST 2018
城市[1]上海的交易笔数：36180
城市[2]无锡的交易笔数：57082
城市[3]贵阳的交易笔数：11238
城市[4]东营的交易笔数：52968

//////////////////////  商家交易量统计信息start  //////////////////////Fri Mar 30 13:53:12 CST 2018
商家[1]408的交易笔数：11238
商家[2]1097的交易笔数：52968
商家[3]1862的交易笔数：36180
商家[4]1912的交易笔数：58038
//////////////////////  城市交易量统计信息start  //////////////////////Fri Mar 30 13:53:12 CST 2018
城市[1]上海的交易笔数：36180
城市[2]无锡的交易笔数：58038
城市[3]贵阳的交易笔数：11238
城市[4]东营的交易笔数：52968



F、也可以到redis客户端中手工查询验证
**************************************************
[zkpk@master ~]$ ./cliredis.sh 
127.0.0.1:6379> keys jiaoyi*
jiaoyi408
jiaoyi1862
jiaoyi1912
jiaoyi1097

127.0.0.1:6379> keys 交易*
交易贵阳
交易上海
交易东营
交易无锡


127.0.0.1:6379> get jiaoyi408
11238

127.0.0.1:6379> get 交易贵阳
11238

